// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id             String          @id @default(cuid())
  username       String
  email          String          @unique
  password       String
  avatar         String?         @db.VarChar(255)
  bio            String?
  
  sessions       Session[]       // Relations to sessions
  userprofile    UserProfile[]   // Relations to user profiles

  // Relations for invites
  sentInvites    Invite[]        @relation("sentInvites")    // Invites sent by this user
  receivedInvites Invite[]       @relation("receivedInvites") // Invites received by this user
}
model Session {
  id        String   @id
  userId    String
  expiresAt DateTime

  user      user     @relation(references: [id], fields: [userId], onDelete: Cascade)
}


model UserProfile {
  id       String   @id @default(cuid())
  user     user     @relation(fields: [id], references: [id], onDelete: Cascade)
  userBio  String 
  userConnections  Int
  userStatus  String

}

model Invite {
  id         String   @id @default(cuid())
  senderId   String
  receiverId String
  status     String   @default("pending") // could be "pending", "accepted", "rejected"
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  sender     user     @relation("sentInvites", fields: [senderId], references: [id], onDelete: Cascade)
  receiver   user     @relation("receivedInvites", fields: [receiverId], references: [id], onDelete: Cascade)
}